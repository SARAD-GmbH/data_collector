:py:mod:`sarad.cluster`
=======================

.. py:module:: sarad.cluster

.. autoapi-nested-parse::

   Module to handle a cluster of SARAD instruments.

   All instruments forming a cluster are connected to
   the same instrument controller.
   SaradCluster is used as singleton.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sarad.cluster.SaradCluster



Functions
~~~~~~~~~

.. autoapisummary::

   sarad.cluster.logger



Attributes
~~~~~~~~~~

.. autoapisummary::

   sarad.cluster._LOGGER
   sarad.cluster.mycluster


.. py:data:: _LOGGER
   

   

.. py:function:: logger()

   Returns the logger instance used in this module.


.. py:class:: SaradCluster(native_ports: Optional[List[str]] = None, ignore_ports: Optional[List[str]] = None)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`sarad.sari.SI`\ ]

   Class to define a cluster of SARAD instruments
   that are all connected to one controller

   Properties:
       native_ports
       ignore_ports
       active_ports
       connected_instruments
       start_time
   Public methods:
       set_native_ports()
       get_native_ports()
       get_active_ports()
       get_connected_instruments()
       update_connected_instruments()
       synchronize(): Stop all instruments, set time, start all measurings
       dump(): Save all properties to a Pickle file

   .. py:attribute:: version
      :annotation: :str = 3.0

      

   .. py:method:: get_instrument(device_id, port) -> Optional[sarad.sari.SI]
      :staticmethod:

      Get the instrument object for an instrument
      with know device_id that is connected to a known port

      :param device_id: device id of the instrument encoding
                        family, type and serial number
      :type device_id: str
      :param port: id of the serial device the instrument is
                   connected to
      :type port: str

      :returns: SaradInst object


   .. py:method:: __iter__(self) -> Iterator[sarad.sari.SI]


   .. py:method:: synchronize(self, cycles_dict: Dict[str, int]) -> bool

      Stop measuring cycles of all connected instruments.
      Set instrument time to UTC on all instruments.
      Start measuring cycle on all instruments according to dictionary
      in cycles_dict.


   .. py:method:: update_connected_instruments(self, ports_to_test=None, ports_to_skip=None) -> List[sarad.sari.SI]

      Update the list of connected instruments
      in self.__connected_instruments and return this list.

      :param ports_to_test: list of serial device ids to test.
                            If None, the function will test all serial devices in self.active_ports.
                            If given, the function will test serial devices in ports_to_test
                            and add newly detected instruments to self.__connected_instruments.
                            If no instrument can be found on one of the ports, the instrument
                            will be removed from self.__connected_instruments.
      :type ports_to_test: List[str]

      :returns: List of instruments added to self.__connected_instruments.
                [] if instruments have been removed.


   .. py:method:: dump(self, file: IO[bytes]) -> None

      Save the cluster information to a file.


   .. py:method:: active_ports(self) -> List[str]
      :property:

      SARAD instruments can be connected:
      1. by RS232 on a native RS232 interface at the computer
      2. via their built in FT232R USB-serial converter
      3. via an external USB-serial converter (Prolific, Prolific fake, FTDI)
      4. via the SARAD ZigBee coordinator with FT232R


   .. py:method:: connected_instruments(self) -> List[sarad.sari.SI]
      :property:

      Return list of connected instruments.


   .. py:method:: native_ports(self) -> Optional[List[str]]
      :property:

      Return the list of all native serial ports (RS-232 ports)
      available at the instrument controller.


   .. py:method:: ignore_ports(self) -> Optional[List[str]]
      :property:

      Return the list of all serial ports
      at the instrument controller that shall be ignored.


   .. py:method:: start_time(self) -> datetime.datetime
      :property:

      Get a pre-defined start time for all instruments in this cluster.



.. py:data:: mycluster
   :annotation: :SaradCluster

   

