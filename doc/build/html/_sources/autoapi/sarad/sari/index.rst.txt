:py:mod:`sarad.sari`
====================

.. py:module:: sarad.sari

.. autoapi-nested-parse::

   Abstract class for all SARAD instruments

   SaradInst comprises all attributes and methods
   that all SARAD instruments have in common.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sarad.sari.Route
   sarad.sari.CmdDict
   sarad.sari.MeasurandDict
   sarad.sari.InstrumentDict
   sarad.sari.FamilyDict
   sarad.sari.CheckedAnswerDict
   sarad.sari.Measurand
   sarad.sari.Sensor
   sarad.sari.Component
   sarad.sari.SaradInst



Functions
~~~~~~~~~

.. autoapisummary::

   sarad.sari.logger



Attributes
~~~~~~~~~~

.. autoapisummary::

   sarad.sari._LOGGER
   sarad.sari.SI


.. py:data:: _LOGGER

   

.. py:function:: logger()

   Returns the logger instance used in this module.


.. py:data:: SI

   

.. py:class:: Route


   Class to store the route directing to a SaradInst.

   rs485_address and zigbee_address are optional and may be None for the
   simple case that SardInst is directly and exclusively connected to a serial
   port.

   :param port: Name of the serial port
   :type port: str
   :param rs485_address: RS-485 bus address. None, if RS-485 addressing is not used.
   :type rs485_address: int
   :param zigbee_address: Address of instrument on NETmonitors coordinator.
                          None, if ZigBee is not used.
   :type zigbee_address: int

   .. py:attribute:: port
      :type: Optional[str]

      

   .. py:attribute:: rs485_address
      :type: Optional[int]

      

   .. py:attribute:: zigbee_address
      :type: Optional[int]

      


.. py:class:: CmdDict


   Bases: :py:obj:`TypedDict`

   Type declaration for the result of the analysis of a binary command message.

   .. py:attribute:: cmd
      :type: bytes

      

   .. py:attribute:: data
      :type: bytes

      


.. py:class:: MeasurandDict


   Bases: :py:obj:`TypedDict`

   Type declaration for Measurand dictionary.

   .. py:attribute:: measurand_operator
      :type: str

      

   .. py:attribute:: measurand_value
      :type: float

      

   .. py:attribute:: measurand_unit
      :type: str

      

   .. py:attribute:: valid
      :type: bool

      


.. py:class:: InstrumentDict


   Bases: :py:obj:`TypedDict`

   Type declaration for instrument type dictionary.

   .. py:attribute:: type_id
      :type: int

      

   .. py:attribute:: type_name
      :type: str

      


.. py:class:: FamilyDict


   Bases: :py:obj:`TypedDict`

   Type declaration for Family dictionary.

   .. py:attribute:: family_id
      :type: int

      

   .. py:attribute:: family_name
      :type: str

      

   .. py:attribute:: baudrate
      :type: int

      

   .. py:attribute:: get_id_cmd
      :type: List[bytes]

      

   .. py:attribute:: length_of_reply
      :type: int

      

   .. py:attribute:: wait_for_reply
      :type: float

      

   .. py:attribute:: write_sleeptime
      :type: float

      

   .. py:attribute:: parity
      :type: str

      

   .. py:attribute:: ok_byte
      :type: int

      

   .. py:attribute:: config_parameters
      :type: List[Dict[str, Any]]

      

   .. py:attribute:: types
      :type: List[InstrumentDict]

      


.. py:class:: CheckedAnswerDict


   Bases: :py:obj:`TypedDict`

   Type declaration for checked reply from instrument.

   .. py:attribute:: is_valid
      :type: bool

      

   .. py:attribute:: is_control
      :type: bool

      

   .. py:attribute:: is_last_frame
      :type: bool

      

   .. py:attribute:: payload
      :type: bytes

      

   .. py:attribute:: number_of_bytes_in_payload
      :type: int

      

   .. py:attribute:: raw
      :type: bytes

      

   .. py:attribute:: standard_frame
      :type: bytes

      


.. py:class:: Measurand(measurand_id: int, measurand_name: str, measurand_unit=None, measurand_source=None)


   Class providing a measurand that is delivered by a sensor.

   Properties:
       id
       name
       operator
       value
       unit
       source
       time
       gps

   .. py:property:: measurand_id
      :type: int

      Return the Id of this measurand.

   .. py:property:: name
      :type: str

      Return the name of this measurand.

   .. py:property:: unit
      :type: str

      Return the physical unit of this measurand.

   .. py:property:: source
      :type: int

      Return the source index belonging to this measurand.

      This index marks the position the measurand can be found in the
      list of recent values provided by the instrument
      as reply to the GetComponentResult or _gather_all_recent_values
      commands respectively.

   .. py:property:: operator
      :type: str

      Return the operator belonging to this measurand.

      Typical operators are '<', '>'

   .. py:property:: value
      :type: Optional[float]

      Return the value of the measurand.

   .. py:property:: time
      :type: datetime.datetime

      Return the aquisition time (timestamp) of the measurand.

   .. py:property:: gps
      :type: str

      Return the GPS string of the measurand.

   .. py:attribute:: version
      :type: str
      :value: '0.1'

      

   .. py:method:: __str__() -> str

      Return str(self).



.. py:class:: Sensor(sensor_id: int, sensor_name: str)


   Class describing a sensor that is part of a component.

   Properties:
       id
       name
       interval: Measuring interval in seconds
   Public methods:
       get_measurands()

   .. py:property:: sensor_id
      :type: int

      Return the Id of this sensor.

   .. py:property:: name
      :type: str

      Return the name of this sensor.

   .. py:property:: interval
      :type: datetime.timedelta

      Return the measuring interval of this sensor.

   .. py:property:: measurands
      :type: List[Measurand]

      Return the list of measurands of this sensor.

   .. py:attribute:: version
      :type: str
      :value: '0.1'

      

   .. py:method:: __iter__()


   .. py:method:: __str__() -> str

      Return str(self).



.. py:class:: Component(component_id: int, component_name: str)


   Class describing a sensor or actor component built into an instrument

   .. py:property:: component_id
      :type: int

      Return the Id of this component.

   .. py:property:: name
      :type: str

      Return the name of this component.

   .. py:property:: sensors
      :type: List[Sensor]

      Return the list of sensors belonging to this component.

   .. py:attribute:: version
      :value: '0.1'

      

   .. py:method:: __iter__()


   .. py:method:: __str__() -> str

      Return str(self).



.. py:class:: SaradInst(family: FamilyDict)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`SI`\ ]

   Basic class for the serial communication protocol of SARAD instruments

   .. attribute:: products

      Dictionary holding a database containing the features
      of all SARAD products that cannot be gained from the instrument itself.

      :type: Dict

   Properties:
       route: Route dataclass object containing the serial communication port,
              RS-485 bus address and ZigBee address if applicable
       family: Device family of the instrument expected to be at this port
       device_id: Identifier for an individual instrument in a cluster
       type_id: Together with family, this Id identifys the instrument type.
       type_name: Identifys the instrument type.
       software_version: The version of the firmware.
       serial_number: Serial number of the connected instrument.
       components: List of sensor or actor components

   .. py:class:: Lock(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Setting of the device. Lock the hardware button.

      .. py:attribute:: UNLOCKED
         :type: int
         :value: 1

         

      .. py:attribute:: LOCKED
         :type: int
         :value: 2

         


   .. py:class:: RadonMode(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Setting of the device. Displayed radon values based on
      short living progeny only (fast)
      or on short and long living progeny (slow)

      .. py:attribute:: SLOW
         :type: int
         :value: 1

         

      .. py:attribute:: FAST
         :type: int
         :value: 2

         


   .. py:class:: PumpMode(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Setting of the devices having a pump.

      .. py:attribute:: CONTINUOUS
         :type: int
         :value: 1

         

      .. py:attribute:: INTERVAL
         :type: int
         :value: 2

         


   .. py:class:: Units(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Setting of the device. Unit system used for display.

      .. py:attribute:: SI
         :type: int
         :value: 1

         

      .. py:attribute:: US
         :type: int
         :value: 2

         


   .. py:class:: Signal(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Setting of the device. When shall it give an audible signal?

      .. py:attribute:: OFF
         :type: int
         :value: 1

         

      .. py:attribute:: ALARM
         :type: int
         :value: 2

         

      .. py:attribute:: SNIFFER_PO216
         :type: int
         :value: 3

         

      .. py:attribute:: PO216_PO218
         :type: int
         :value: 4

         


   .. py:class:: ChamberSize(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Setting the chamber size (Radon Scout PMT only).

      .. py:attribute:: SMALL
         :type: int
         :value: 1

         

      .. py:attribute:: MEDIUM
         :type: int
         :value: 2

         

      .. py:attribute:: LARGE
         :type: int
         :value: 3

         

      .. py:attribute:: XL
         :type: int
         :value: 4

         


   .. py:property:: route
      :type: Route

      Return route to instrument (ser. port, RS-485 address, ZigBee address).

   .. py:property:: device_id
      :type: str

      Return device id.

   .. py:property:: family
      :type: FamilyDict

      Return the instrument family.

   .. py:property:: type_id
      :type: int

      Return the device type id.

   .. py:property:: type_name
      :type: str

      Return the device type name.

   .. py:property:: software_version
      :type: int

      Return the firmware version of the device.

   .. py:property:: serial_number
      :type: int

      Return the serial number of the device.

   .. py:property:: components
      :type: Collection[Component]

      Return the list of components of the device.

   .. py:property:: valid_family
      :type: bool

      True if the family set is correct for the connected instrument.

   .. py:attribute:: version
      :value: '3.2'

      

   .. py:attribute:: ALLOWED_CMDS
      :type: List[int]
      :value: []

      

   .. py:method:: __iter__() -> Iterator[Component]


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: _make_command_msg(cmd_data: List[bytes]) -> bytes
      :staticmethod:

      Encode the message to be sent to the SARAD instrument.

      Arguments are the one byte long command
      and the data bytes to be sent.


   .. py:method:: _analyze_cmd_data(payload: bytes) -> CmdDict
      :staticmethod:


   .. py:method:: _check_message(message: bytes, multiframe: bool) -> CheckedAnswerDict

      Check the message

      Returns a dictionary of:
      is_valid: True if message is valid, False otherwise
      is_control_message: True if control message
      payload: Payload of message
      number_of_bytes_in_payload


   .. py:method:: _check_standard_message(answer: bytes, multiframe: bool) -> CheckedAnswerDict


   .. py:method:: _check_rs485_message(answer: bytes, multiframe: bool, rs485_address) -> CheckedAnswerDict

      Check a RS-485 message

      Returns a dictionary of:
      is_valid: True if answer is valid, False otherwise
      is_control_message: True if control message
      payload: Payload of answer
      number_of_bytes_in_payload


   .. py:method:: _rs485_filter(frame)

      Convert an addressed RS-485 'b-E' frame into a normal 'B-E' frame

      by simply replacing the first two bytes with 'B'.


   .. py:method:: _make_rs485(frame)

      Convert a normal 'B-E' frame into an addressed 'b-E' frame for RS-485


   .. py:method:: check_cmd(raw_cmd) -> bool

      Check an incomming command frame for validity


   .. py:method:: get_message_payload(message: bytes, timeout=0.1) -> CheckedAnswerDict

      Send a message to the instrument and give back the payload of the reply.

      :param message: The message to send.
      :param timeout: Timeout in seconds for waiting for a reply from instrument.

      :returns: A dictionary of
                is_valid: True if answer is valid, False otherwise,
                is_control_message: True if control message,
                is_last_frame: True if no follow-up B-E frame is expected,
                payload: Payload of answer,
                number_of_bytes_in_payload,
                raw: The raw byte string from _get_transparent_reply.
                standard_frame: standard B-E frame derived from b-e frame


   .. py:method:: get_next_payload(timeout=0.1) -> CheckedAnswerDict

      Delivers a follow-up B-E frame without sending a command to the instr.

      Only for multi B-E frame replies (CMD_GetSumSpectrum (`) and
      CMD_GetRoiAreas (a) of the DOSEman family)

              Args:
                  timeout:
                      Timeout for waiting for a reply from instrument.
              Returns:
                  A dictionary of
                  is_valid: True if answer is valid, False otherwise,
                  is_control_message: True if control message,
                  is_last_frame: True if no follow-up B-E frame is expected,
                  payload: Payload of answer,
                  number_of_bytes_in_payload,
                  raw: The raw byte string from _get_transparent_reply.



   .. py:method:: __str__() -> str

      Return str(self).


   .. py:method:: _initialize() -> None


   .. py:method:: get_description() -> bool

      Set instrument type, software version, and serial number.


   .. py:method:: _build_component_list() -> int

      Build up a list of components with sensors and measurands.

      Will be overriden by derived classes.


   .. py:method:: _bytes_to_float(value: bytes) -> float
      :staticmethod:

      Convert 4 bytes (little endian)

      from serial interface into
      floating point nummber according to IEEE 754


   .. py:method:: _parse_value_string(value: str) -> MeasurandDict
      :staticmethod:

      Parse the string containing a value.

      Take a string containing a physical value with operator,
      value and unit and decompose it into its parts
      for further mathematical processing.


   .. py:method:: _encode_setup_word() -> bytes

      Compile the SetupWord for Doseman and RadonScout devices from its components.

      All used arguments from self are enum objects.


   .. py:method:: _decode_setup_word(setup_word: bytes) -> None


   .. py:method:: _get_parameter(parameter_name: str) -> Any


   .. py:method:: get_reply(cmd_data: List[bytes], _reply_length=50, timeout=0.5) -> Any

      Send a command message and get a reply.

      Returns a bytestring of the payload of the instruments reply
      to the provided list of 1-byte command and data bytes.


   .. py:method:: _get_control_bytes(serial)

      Read 3 or 4 Bytes from serial interface resp.


   .. py:method:: _get_payload_length(first_bytes)
      :staticmethod:

      Read 3 Bytes from serial interface

      to get the length of payload from the control byte.


   .. py:method:: _close_serial(serial, keep)
      :staticmethod:


   .. py:method:: release_instrument()

      Close serial port to release the reserved instrument


   .. py:method:: _get_be_frame(serial, keep)

      Get one Rx B-E frame or one b-E frame resp.


   .. py:method:: _get_transparent_reply(raw_cmd, timeout=0.1, keep=True)

      Returns the raw bytestring of the instruments reply


   .. py:method:: _new_rs485_address(raw_cmd)

      Check whether raw_cmd changed the RS-485 bus address of the Instrument.

      If this is the case, self._route will be changed.
      This function must be overriden in the instrumen family dependent implementations.

      :param raw_cmd: Command message to be analyzed.
      :type raw_cmd: bytes


   .. py:method:: start_cycle(cycle_index: int) -> None

      Start measurement cycle.  Place holder for subclasses.


   .. py:method:: stop_cycle() -> None

      Stop measurement cycle.  Place holder for subclasses.


   .. py:method:: set_real_time_clock(date_time: datetime.datetime) -> bool

      Set RTC of instrument to datetime.  Place holder for subclasses.



