:py:mod:`sarad.doseman`
=======================

.. py:module:: sarad.doseman

.. autoapi-nested-parse::

   Module for the communication with instruments of the DOSEman family.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sarad.doseman.DosemanInst




.. py:class:: DosemanInst(family=SaradInst.products[0])


   Bases: :py:obj:`sarad.sari.SaradInst`

   Instrument with Doseman communication protocol

   Inherited properties:
       port
       device_id
       family
       type_id
       type_name
       software_version
       serial_number
       components: List of sensor or actor components
   Inherited Public methods:
       get_reply()

   .. py:attribute:: version
      :value: '0.3'

      

   .. py:attribute:: ALLOWED_CMDS
      :value: [16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 36, 37, 37, 38, 48, 49, 50, 51, 52, 53, 64, 65, 66, 67,...

      

   .. py:method:: get_message_payload(message: bytes, timeout=0.1) -> sarad.sari.CheckedAnswerDict

      Send a message to the instrument and give back the payload of the reply.

      :param message: The message to send.
      :param timeout: Timeout for waiting for a reply from instrument.

      :returns: A dictionary of
                is_valid: True if answer is valid, False otherwise,
                is_control_message: True if control message,
                is_last_frame: True if no follow-up B-E frame is expected,
                payload: Payload of answer,
                number_of_bytes_in_payload,
                raw: The raw byte string from _get_transparent_reply.
                standard_frame: standard B-E frame derived from b-e frame


   .. py:method:: stop_cycle()

      Stop the measuring cycle.


   .. py:method:: start_cycle(cycle_index)

      Start a measuring cycle.

      TODO: rewrite or remove

      self.get_config()  # to set self.__interval
      for component in self.components:
          for sensor in component.sensors:
              sensor.interval = self.__interval
      self._last_sampling_time = datetime.utcnow()
      return self.stop_cycle() and self._push_button()



