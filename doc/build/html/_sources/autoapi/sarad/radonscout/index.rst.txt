:py:mod:`sarad.radonscout`
==========================

.. py:module:: sarad.radonscout

.. autoapi-nested-parse::

   Module for the communication with instruments of the Radon Scout family.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sarad.radonscout.RscInst




.. py:class:: RscInst(family=SaradInst.products[1])


   Bases: :py:obj:`sarad.sari.SaradInst`

   Instrument with Radon Scout communication protocol

   Inherited properties:
       port: String containing the serial communication port
       family: Device family of the instrument expected to be at this port
       device_id: Identifier for an individual instrument in a cluster
       type_id
       type_name
       software_version
       serial_number
       components: List of sensor or actor components
   Inherited methods from SaradInst:
       get_reply()
   Public methods:
       get_all_recent_values()
       get_recent_value(index)
       set_real_time_clock(datetime)
       stop_cycle()
       start_cycle()
       get_config()
       set_config()

   .. py:attribute:: version
      :value: '0.3'

      

   .. py:attribute:: ALLOWED_CMDS
      :value: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]

      

   .. py:method:: _new_rs485_address(raw_cmd)

      Check whether raw_cmd changed the RS-485 bus address of the instrument.
      If this is the case, self._route will be changed.

      :param raw_cmd: Command message to be analyzed.
      :type raw_cmd: bytes


   .. py:method:: _gather_all_recent_values()


   .. py:method:: _build_component_list() -> int

      Build up a list of components with sensors and measurands.

      Will be overriden by derived classes.


   .. py:method:: _get_battery_voltage()


   .. py:method:: _push_button()


   .. py:method:: get_all_recent_values()

      Fill the component objects with recent readings.


   .. py:method:: get_recent_value(component_id=None, sensor_id=None, measurand_id=None)

      Fill component objects with recent measuring values.        This function does the same like get_all_recent_values()        and is only here to provide a compatible API to the DACM interface


   .. py:method:: set_real_time_clock(date_time) -> bool

      Set RTC of instrument to datetime.  Place holder for subclasses.


   .. py:method:: stop_cycle()

      Stop a measurement cycle.


   .. py:method:: start_cycle(cycle_index)

      Start a measurement cycle.


   .. py:method:: get_config()

      Get configuration from device.


   .. py:method:: set_config()

      Upload a new configuration to the device.


   .. py:method:: set_lock()

      Lock the hardware button or switch at the device.


   .. py:method:: set_unlock()

      Unlock the hardware button or switch at the device.


   .. py:method:: set_long_interval()

      Set the measuring interval to 3 h = 180 min = 10800 s


   .. py:method:: set_short_interval()

      Set the measuring interval to 1 h = 60 min = 3600 s


   .. py:method:: get_wifi_access()

      Get the Wi-Fi access data from instrument.


   .. py:method:: set_wifi_access(ssid, password, ip_address, server_port)

      Set the WiFi access data.



